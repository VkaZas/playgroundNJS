{"nodes":[{"x":0,"y":0,"id":0,"fileName":"OpInterface.java","classes":["duplists.OpInterface.Node","duplists.OpInterface"],"_children":[4,5]},{"x":0,"y":0,"id":1,"fileName":"List.java","classes":["duplists.List"],"_children":[6]},{"x":0,"y":0,"id":2,"fileName":"OpList.java","classes":["duplists.OpDupList"],"_children":[7]},{"x":0,"y":0,"id":3,"fileName":"LazyDupList.java","classes":["duplists.LazyDupList"],"_children":[8]},{"x":0,"y":0,"id":4,"className":"duplists.OpInterface.Node","methods":["Node"],"_children":[12],"source":"class Node {</br></br>        int key;</br>        Node next = null;</br>        public Node(int i) {</br>            key = i;</br>        }</br>    }"},{"x":0,"y":0,"id":5,"className":"duplists.OpInterface","methods":[],"_children":[],"source":"public interface OpInterface<T> extends </br>    class Node {</br></br>        int key;</br>        Node next = null;</br>        public Node(int i) {</br>            key = i;</br>        }</br>    }</br>}"},{"x":0,"y":0,"id":6,"className":"duplists.List","methods":["add","remove"],"_children":[13,14],"source":"/*</br> * Common functionality of the lists you</br> */</br>public interface List<T> {</br>    boolean add(T item);</br>    boolean remove(T item);</br>}"},{"x":0,"y":0,"id":7,"className":"duplists.OpDupList","methods":["add","remove","validate"],"_children":[9,10,11],"source":"class OpDupList<T> implements OpInterfac</br>    private Node<T> head;</br></br>    public boolean validate(Node<T> pred</br>        Node<T> node = head;</br>        while (node.key <= pred.key) {</br>            if (node == pred)</br>                return pred.next == curr</br>            node = node.next;</br>        }</br>        return false;</br>    }</br></br>    public boolean add(T item) {</br>        return false;</br>    }</br></br>    public boolean remove(T item) {</br>        return false;</br>    }</br>}"},{"x":0,"y":0,"id":8,"className":"duplists.LazyDupList","methods":["add","isEmpty"],"_children":[15,16],"source":"public abstract class LazyDupList<T> imp</br>    private Node<T> head;</br>    public boolean isEmpty() {</br>        return head.next.item == null;</br>    }</br>    public boolean add(T item) {</br>        int key = item.hashCode();</br>        Node<T> node = new Node<>(item);</br>        return true;</br>    }</br>}"},{"x":0,"y":0,"id":9,"className":"duplists.OpDupList","methodName":"add","source":"public boolean add(T item) {</br>        return false;</br>    }"},{"x":0,"y":0,"id":10,"className":"duplists.OpDupList","methodName":"remove","source":"public boolean remove(T item) {</br>        return false;</br>    }"},{"x":0,"y":0,"id":11,"className":"duplists.OpDupList","methodName":"validate","source":"public boolean validate(Node<T> pred, No</br>        Node<T> node = head;</br>        while (node.key <= pred.key) {</br>            if (node == pred)</br>                return pred.next == curr</br>            node = node.next;</br>        }</br>        return false;</br>    }"},{"x":0,"y":0,"id":12,"className":"duplists.OpInterface.Node","methodName":"Node","source":"public Node(int i) {</br>            key = i;</br>        }"},{"x":0,"y":0,"id":13,"className":"duplists.List","methodName":"add","source":"boolean add(T item);"},{"x":0,"y":0,"id":14,"className":"duplists.List","methodName":"remove","source":"boolean remove(T item);"},{"x":0,"y":0,"id":15,"className":"duplists.LazyDupList","methodName":"add","source":"public boolean add(T item) {</br>        int key = item.hashCode();</br>        Node<T> node = new Node<>(item);</br>        return true;</br>    }"},{"x":0,"y":0,"id":16,"className":"duplists.LazyDupList","methodName":"isEmpty","source":"public boolean isEmpty() {</br>        return head.next.item == null;</br>    }"}],"links":[{"source":0,"target":0},{"source":2,"target":0},{"source":3,"target":0},{"source":0,"target":1},{"source":3,"target":1},{"source":0,"target":4},{"source":0,"target":5},{"source":1,"target":6},{"source":2,"target":7},{"source":3,"target":8},{"source":7,"target":9},{"source":7,"target":10},{"source":7,"target":11},{"source":4,"target":12},{"source":6,"target":13},{"source":6,"target":14},{"source":8,"target":15},{"source":8,"target":16}]}